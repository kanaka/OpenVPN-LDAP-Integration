#!/bin/bash
# Copyright 2009 Summer Institue of Linguistics
# Copyright 2009 Joel Martin <joel_martin@sil.org>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Default user settings
NAME=$(basename ${0})
VERBOSE=${VERBOSE:-}

# This should match the regex in the client-connect script
re_access="^vpn[^0-9 ]*[\s=:]\s*(\d+)(?:$|\s$)"

usage="""
Usage:
       ${NAME} [options] new <common_name> <email>
       ${NAME} [options] cert <common_name> <email>
       ${NAME} [options] pkg <common_name>
       ${NAME} [options] firmware <common_name>
       ${NAME} [options] revoke <common_name>
       ${NAME} [options] show-cert [--csv] [common_name]
       ${NAME} [options] show-access [--csv] [--all]
       ${NAME} [options] show-active
       ${NAME} [options] new-ca

General Options:
   -v            verbose output
   -h | --help   show detailed help
   -p | --password PASSWORD
                 use alternate cert/key password
   <common_name> create certificate and NSIS package for
                 Active Directory account <common_name>
   <email>       email address for <common_name>
"""
usage_long="""${usage}

Description:
    OpenVPN client certificate management program.

    ${NAME} can be used to generate or revoke a client
    certificate, create a install packages for a client, or
    show information about client certificates. You must
    configure ${NAME} in ${NAME}.cfg before you can use it.
    (see Configuration section below). 

${NAME} new
    Generate a new client certificate for <common_name>
    and create install packages containing that certificate. The
    <email> address will be encoded in the certificate.

${NAME} cert
    Only create a new client certificate for <common_name>. The
    <email> address will be encoded in the certificate.

${NAME} pkg
    Only create the install packages using a existing certificate.

${NAME} firmware
    Create a new DD-WRT firmware image with the OpenVPN cert/keys
    for <common_name> installed and configured.

${NAME} revoke
    Revoke the certificate for <common_name> and update the CRL
    (certificate revocation list) file and copy it to the server.

${NAME} show-cert [--csv]
    List valid, expired and revoked certificates. If <common_name>
    is specified then only show certificates for that client. If --csv
    is specified then the output will be comma separate values.

${NAME} show-access [--csv] [--all]
    Show connect/disconnect access logs for all servers for the past
    1-2 weeks. If --csv is specified then the output will be comma
    separate values. The --all option will show all access logs that
    exist on the servers (this may take a while to gather the logs).

${NAME} show-active
    Show current active connections for all servers

${NAME} new-ca
    Generate a new Certificate Authority and related files. The
    new CA cert (ca.crt), server cert (server.crt), server key
    (server.key), Diffie Hellman parameters (dh1024.pem), tlsauth
    static key (ta.key), and certificate revocation list file
    (crl.pem) should be copied to the server(s).
    The CA key should NOT be copied to the server. All client
    certs/keys must also be re-issued.

    WARNING: This command invalidates all existing server and
    client keys. For this reason you must manually remove the keys
    and packages subdirectory before this command will run.


Configuration:

    The Active Directory/LDAP and OpenVPN server configuration for
    ${NAME} must be specified in ${NAME}.cfg.
    
    The following variables need to be configured:

    ---------------
    ldapuri=\"ldap://<host_or_IP>\"
        # LDAP URI to connect to

    ldapuser=\"<user>\"
        # LDAP/AD user with permission to query

    ldappass=\"<password>\"
        # Password for the query user

    serv_host=\"<serv_host>\"
        # Hostname of the OpenVPN server(s). The hostname can map
        # to more than 1 IP address.

    serv_user=\"<serv_user>\"
        # A user on the OpenVPN server(s) that has permission to read
        # the openvpn status and log files and has permission to
        # overwrite the CRL (certificate revocation list) file.
        # The ssh public key for the user that run the ${NAME} program
        # should be added to the authorized_keys file of the this user
        # on the OpenVPN server(s) so that no password is required.

    serv_crl_path=\"<path>\"
        # The path on the OpenVPN server(s) to the CRL file.
    ---------------


Requirements/prerequisites:

  - installed packages:
    - openvpn:    to generate tlsauth key
    - openssl:    key management
    - ldap-utils: ldapsearch command to verify users
    - nsis:       makensis to create Windows NSIS package
    - zip:        to compress the NSIS *.exe

  - files in the 'config' directory:
    - openssl.cnf file (from openvpn's easy-rsa v2.0 directory)
    - openvpn client config files:
      client.ovpn, linux.conf, router.conf

  - the ${NAME}.cfg file must be setup as described above.

"""

main() {
    process_parameters "$@"

    # Read in the LDAP/AD and server configuration file
    [ -e ${0}.cfg ] || die "Config ${0}.cfg not found (try ${0} --help)"
    . ${0}.cfg

    derive_settings
    show_settings
    sanity_checks

    case ${command} in
    new)
        lock ${key_dir}
        gen_cert
        gen_pkg
        unlock ${key_dir}
        echo -e "\n>>> Successfully created new client"
        ;;
    cert)
        lock ${key_dir}
        gen_cert
        unlock ${key_dir}
        echo -e "\n>>> Successfully created new certificate/key"
        ;;
    pkg|package)
        lock ${key_dir}
        gen_pkg
        unlock ${key_dir}
        echo -e "\n>>> Successfully created new packages"
        ;;
    firmware)
        lock ${key_dir}
        gen_firmware
        unlock ${key_dir}
        echo -e "\n>>> Successfully created new router firmware"
        ;;
    revoke)
        lock ${key_dir}
        revoke_cert
        copy_crl
        unlock ${key_dir}
        echo -e "\n>>> Successfully revoked certificate/key"
        ;;
    show-cert*)
        show_cert
        ;;
    show-access*)
        show_access_log
        ;;
    show-active)
        show_active
        ;;
    new-ca)
        lock ${key_dir}
        gen_ca
        unlock ${key_dir}
        echo -e "\n>>> Successfully created new Certificate Authority"
        ;;
    esac
}


# -----------------------------------------------------------------------
# Utility routines
# -----------------------------------------------------------------------
die() { echo >&2 -e "$*"; exit 1; }
vecho() { [ "${VERBOSE}" ] && echo -e "$*"; }
usage() {
    [ "$*" ] && echo >&2 -e "$*"
    echo >&2 "${usage}"
    die
}
vusage() {
    [ "$*" ] && echo -e "$*"
    echo "${usage_long}"
    die
}

# returns 0 for 'yes' or 1 for 'no'
yesno() {
    local answer=
    [ "${ERROR_ASK}" ] && echo "$* n" && return 1
    [ "${NO_ASK}" ] && echo "$* y" && return 0
    while read -p "$*" answer; do
        case ${answer} in
            y|yes|Y|Yes|YES) return 0 ;;
            n|no|N|No|NO) return 1 ;;
            *) echo "Eh?"; answer= ;;
        esac
    done
}

# Creates a temporary directory and set the global 'tmp_dir' to it.
# Unlock will clean up this directory automatically.
make_tmp_dir() {
    # If we have already been called, do nothing
    [ "${tmp_dir}" ] && [ -d "${tmp_dir}" ] && return

    tmp_dir=$(mktemp -d)  # Global for cleanup

    [ "${tmp_dir}" ] || die "Could not create temp directory"
    [ "${tmp_dir//\//}" ] || die "Temp dir (${tmp_dir}) is bogus"
}


# Lock routines to make sure there is only one caller at a time.
# This locking strategy uses a symlink (because creation is atomic)
# that contains the pid of the current owner of the lock. That way
# stale locks can be cleaned up by checking if the process is still
# running.
trap_list="TERM QUIT INT EXIT"
mypid=$$
lock() {
    local path=${1%/}.lock owner=

    vecho >&2 "Locking ${path}"
    if [ -L ${path} ]; then
        # Lock exists, if locker is gone, remove the lock
        owner=$(readlink ${path})
        if ps ax | grep -qs "^ *${owner:-NONE}.*${NAME}"; then
            echo >&2 "Somebody else is running this program (pid: ${owner})"
            echo >&2 "Simultaneous use can cause corruption"
            die "Please wait and then try again."
        else
            echo "Removing stale lock on ${path} (pid: ${owner})"
            rm ${path}
        fi
    fi
    if ln -s ${mypid} ${path} 2>/dev/null; then
        trap "unlock_trap ${1}" ${trap_list}
    else
        die "Failed to obtain lock on ${path}"
    fi
}
unlock() {
    local path=$1 owner=
    path=${path%/}.lock

    # Don't quote trap_list, they're multiple args
    trap - ${trap_list}

    if [ -d "${tmp_dir}" ] && [ -n "${tmp_dir//\//}" ]; then
        vecho "Removing temp dir (${tmp_dir})"
        rm -r "${tmp_dir}"
    fi

    owner=$(readlink ${path})
    vecho >&2 "Unlocking ${path}"
    if [ "${owner}" == "${mypid}" ]; then
        rm -f ${path}
    else
        die "Lock corruption on ${path}!! (us: ${mypid}, owner ${owner}"
    fi
}
unlock_trap() {
    vecho >&2 "Caught signal, cleaning up."
    # TODO: put the key dir back the way it was if failures
    unlock $1
    die
}


# -----------------------------------------------------------------------
# Parameter and derived variable processing
# -----------------------------------------------------------------------

process_parameters() {
    # Process command line parameters
    while [ "$*" ]; do
        param=$1; shift; OPTARG=$1
        case $param in
        -v|--verbose)   VERBOSE="-v"                    ;;
        -h|--help)      vusage                          ;;
        -p|--password)  key_password="${OPTARG}"; shift ;;
        --check)        check_only=1; ERROR_ASK=1       ;;
        --noask)        NO_ASK=1;                       ;;
        --noninter*)    NO_ASK=1;                       ;;
        --all)          DO_ALL=1;                       ;;
        --csv)          DO_CSV=1;                       ;;
        -*)             die "Unknown paramter $param"   ;;
        *)              non_opts="${non_opts} ${param}" ;;
        esac
    done
    
    # Process positional parameters
    [ "${non_opts}" ] || usage "You must specify a command"
    set ${non_opts}
    command=$1; shift
    case ${command} in
    new|cert)
        [ ${#} -gt 2 ] && usage "Too many parameters"
        name=$1; email=$2 ;;
    new-ca)
        [ ${#} -gt 0 ] && usage "Too many parameters" ;;
    pkg|package|firmware|revoke|show-cert*|show-access*|show-active)
        [ ${#} -gt 1 ] && usage "Too many parameters"
        name=$1  ;;
    *)
        usage "Unknown command ${command}" ;;
    esac
}


derive_settings() {
    # Paths and commands
    top_dir=$(readlink -f $(dirname ${0}))
    key_dir=${top_dir}/keys
    cfg_dir=${top_dir}/config/
    key_cfg=${cfg_dir}/openssl.cnf
    pkg_dir=${top_dir}/packages

    key_password=${key_password:-$(date +%Y)_${name}}
    http_password=$(perl -e "print crypt('$key_password','\$1\$2ujv89t5\$');")
    servers=$(host -t A ${serv_host} | awk '{print $4}')
    
    openvpn=${openvpn:-openvpn}
    makensis=${makensis:-makensis}
    zip=${zip:-zip}
    find_pkg=$(dirname $(ls -d ${top_dir}/*/install-win32 \
               2>/dev/null | tail -n1) 2>/dev/null)
    nsis_dir=${nsis_dir:-${find_pkg}}
    nsis_file=${nsis_dir}/install-win32/openvpn.nsi

    find_kit=$(dirname $(ls -d ${top_dir}/mod-kit/build_firmware.sh \
               2>/dev/null | tail -n1) 2>/dev/null)
    kit_dir=${kit_dir:-${find_kit}}
    fw_bin=$(ls -d ${top_dir}/dd-wrt*openvpn.bin \
             2>/dev/null | tail -n1)
    
    ldapbase="dc=dept,dc=example,dc=com"
    ldapsearch=${ldapsearch:-ldapsearch}
    ldapbinddn="cn=${ldapuser},cn=Users,${ldapbase}"
    ldapcmd="${ldapsearch} -LLL -x -H ${ldapuri} \
             -D ${ldapbinddn} -w ${ldappass} -b ${ldapbase}"
    
    # Default settings that affect openssl.cnf.
    export KEY_DIR="${key_dir}"
    export KEY_OU=""
    export KEY_CN="${name}"
    export KEY_SIZE=2048
    export CA_EXPIRE=3650  # 10 years
    export KEY_EXPIRE=730  # 2 years
    export KEY_CITY="DALLAS"
    export KEY_PROVINCE="TX"
    export KEY_COUNTRY="US"
    export KEY_ORG="EXAMPLE COMPANY"
    export KEY_EMAIL="${email}"
    export PKCS11_MODULE_PATH= # Needed for generic openssl.cnf
    export PKCS11_PIN= # Needed for generic openssl.cnf

    # If we are creating a new CA then override CN and EMAIL
    case ${command} in
    new-ca)
        export KEY_CN="${serv_host}"
        export KEY_EMAIL="admin@example.com" ;;
    esac
}

show_settings() {
    # Output settings if verbose output requested
    vecho "top_dir:       ${top_dir}"
    vecho "command:       ${command}"
    vecho "name:          ${name}"
    vecho "email:         ${email}"
    vecho "key_dir:       ${key_dir}"
    vecho "key_cfg:       ${key_cfg}"
    vecho "pkg_dir:       ${pkg_dir}"
    vecho "key_password:  ${key_password}"
    vecho "http_password: ${http_password}"
    vecho "servers:       ${servers}"
    vecho "nsis_dir:      ${nsis_dir}"
    vecho "nsis_file:     ${nsis_file}"
    vecho "kit_dir:       ${kit_dir}"
    vecho "fw_bin:        ${fw_bin}"
    vecho "KEY_DIR:       ${KEY_DIR}"
    vecho "KEY_CN:        ${KEY_CN}"
    vecho "KEY_SIZE:      ${KEY_SIZE}"
    vecho "CA_EXPIRE:     ${CA_EXPIRE}"
    vecho "KEY_EXPIRE:    ${KEY_EXPIRE}"
    vecho "KEY_CITY:      ${KEY_CITY}"
    vecho "KEY_PROVINCE:  ${KEY_PROVINCE}"
    vecho "KEY_COUNTRY:   ${KEY_COUNTRY}"
    vecho "KEY_ORG:       ${KEY_ORG}"
    vecho "KEY_EMAIL:     ${KEY_EMAIL}"
    vecho
}


# -----------------------------------------------------------------------
# Sanity check routines
# -----------------------------------------------------------------------

sanity_checks() {
    # General sanity checks
    [ -d "${top_dir}" ] || die "Could not find top level directory"
    [ -d "${cfg_dir}" ] || die "Could not find ${cfg_dir}"
    [ -e "${key_cfg}" ] || die "Missing config file ${key_cfg}"
  
    # Command specific checks follow:
 
    # The keys and packages directories must be in the right state
    case ${command} in
    new|cert|pkg|package|firmware|revoke)
        [ "${name}" ] || usage "You must specify an account name"
        check_dirs ;;
    show-cert*)
        check_dirs ;;
    new-ca)       # New certificate authority checks
        [ -e "${key_dir}" ] \
            && die "${key_dir} exists, refusing to create new CA"
        [ -e "${pkg_dir}" ] \
            && die "${pkg_dir} exists, refusing to create new CA"
        ;;
    esac
 
    # an active key is required
    case ${command} in
    pkg|package|firmware|revoke)
        # Check to make sure there is an active key for this user
        if cut -f1,3,6 --output-delimiter=":" ${key_dir}/index.txt \
                | grep -qs "^V::.*CN=${name}/"; then
            # We found one to revoke
            true
        else
            die "No valid certificate for ${name} found in" \
                "${key_dir}/index.txt"
        fi
        ;;
    esac

    # communication with the servers is required
    case ${command} in
    show-access|show-active|revoke)
        [ "${servers}" ] || die "Could not resolve ${serv_host}"
        ;;
    esac

    # the user must be configured correctly in LDAP/AD
    case ${command} in
    new|cert)    # New certificate checks
        [ "${email}" ] || usage "You must specify an email address"
        [ "${email/@/}" ] || usage "Invalid email: ${email}"
        which ${ldapsearch} &>/dev/null \
            || die "${ldapsearch} command not found"
    
        # Check to make sure there isn't an active key for this user
        if cut -f1,3,6 --output-delimiter=":" ${key_dir}/index.txt \
                | grep -qs "^V::.*CN=${name}/"; then
            echo >&2 "*** ${name} already exists in ${key_dir}/index.txt"
            echo >&2 "*** Perhaps you want to revoke before re-issuing"
            yesno "*** Do you want to continue anyway (y/n)? " || exit 0
            echo >&2
        fi
    
        # Active Directory/LDAP account checks
        ldif=$(${ldapcmd} "(&(objectcategory=person)(objectclass=user)(cn=${name}))")
        dn=$(echo "${ldif}" | grep -i "^dn: " | sed 's/^.*: //')
        lname=$(echo "${ldif}" | grep -i "^displayName: " | sed 's/^.*: //')
    
        # Check number of user records returned
        lcount=$(echo -n "${ldif}" | grep "^dn: " | wc -l)
        if [ "${lcount}" -eq 0 ]; then
            die "No AD/LDAP record found for ${name}"
        elif [ "${lcount}" -gt 1 ]; then
            echo >&2 "More than one AD/LDAP record found for ${name}:"
            die "$(echo "${ldif}" | grep '^cn: ')"
        fi
    
        # Check group membership in VPN groups with correct info field
        ldata=$(${ldapcmd} "(&(cn=VPN *)(member=${dn}))" \
                | grep -Ei "^cn: VPN|^info:")
        count=0
        while read g; do
            vecho "Checking group '${g}'"
            iraw=$(echo "${ldata}" | egrep -A1 "${g}" | grep "^info:")
            if echo "${iraw}" | grep -qs "^info::"; then
                # decode base64 encoded info field
                info=$(echo "${iraw}" | sed 's/^[^:]*:: //' | base64 -d)
            else
                # Not encoded
                info=$(echo "${iraw}" | sed 's/^[^:]*: //')
            fi
            # Only accumulate groups with vpn access data in info field
            if echo "${info}" | grep -qsP "${re_access}"; then
                count=$(( count + 1 ))
                lgroup="${lgroup}${g}, "
            fi
        done < <(echo -e "${ldata}" | grep -i "^cn:" | sed 's/^[^:]*: //')
        lgroup=${lgroup%, }

        if [ "${count}" -eq 0 ]; then
            echo >&2 "*** ${name} is not a member of an AD/LDAP VPN group"
            yesno "*** Continue anyway (y/n)? " || exit 1
            echo >&2
        elif [ "${count}" -gt 1 ]; then
            echo >&2 "*** ${name} is a member of multiple VPN groups:"
            echo >&2 -e "    ${lgroup}"
            yesno "*** Continue anyway (y/n)? " || exit 1
            echo >&2
        fi
        ;;
    pkg|package)   # New Windows package only checks
        [ -e "${key_dir}/${name}.p12" ] \
            || die "${name} does not have a valid certificate"
        ;;
    esac

    # State that is required for NSIS package and firmware generation
    which openssl &>/dev/null || die "openssl command not found"
    case ${command} in
    new-ca)
        which ${openvpn} &>/dev/null || die "${openvpn} command not found"
        ;;
    new|pkg|package)
        which ${makensis} &>/dev/null || die "${makensis} command not found"
        which ${zip} &>/dev/null || die "${zip} command not found"
        [ -d "${nsis_dir}" ] || die "Could not find openvpn NSIS directory"
        [ -e "${nsis_file}" ] || die "Could not find openvpn.nsi"
        [ -e "${cfg_dir}/client.ovpn" ] \
            || die "Could not find ${cfg_dir}/client.ovpn"
        ;;
    firmware)
        [ "${http_password}" ] || die "Failed to crypt password"
        [ -d "${kit_dir}" ] || die "Failed to find firmware mod-kit"
        [ -e "${fw_bin}" ] || die "Failed to find DD-WRT firmware"
        which gcc &>/dev/null || die "gcc command not found"
        which g++ &>/dev/null || die "g++ command not found"
        which make &>/dev/null || die "make command not found"
        [ -e /usr/include/zlib.h ] || die "Could not find zlib.h"
        ;;
    esac

    [ "${check_only}" ] && exit 0

    # Final confirmation
    case ${command} in
    new)
        echo >&2 "*** Create new certificate and install packages for:"
        echo >&2 "***     Username     : ${name}"
        echo >&2 "***     Name         : ${lname}"
        echo >&2 "***     Email        : ${email}"
        echo >&2 "***     VPN group(s) : ${lgroup}"
        yesno "*** Continue (y/n)? " || exit 1 ;;
    cert)
        echo >&2 "*** Create new certificate for ${lname}:"
        echo >&2 "***     Username     : ${name}"
        echo >&2 "***     Name         : ${lname}"
        echo >&2 "***     Email        : ${email}"
        echo >&2 "***     VPN group    : ${lgroup}"
        yesno "*** Continue (y/n)? " || exit 1 ;;
    pkg|package)
        echo >&2 "*** Create an install packages for ${name}:"
        yesno "*** Continue (y/n)? " || exit 1 ;;
    firmware)
        echo >&2 "*** Create DD-WRT firmware for ${name}"
        yesno "*** Continue (y/n)? " || exit 1 ;;
    revoke)
        echo >&2 "*** Revoke certificate for ${name}"
        echo >&2 "*** and copy CRL file to ${serv_host} (${servers})"
        yesno "*** Continue (y/n)? " || exit 1 ;;
    new-ca)
        echo >&2 "*** Create a new CA and server cert/key"
        yesno "*** Continue (y/n)? " || exit 1 ;;
    esac
    echo >&2

}

# Verify that the keys and packages directories are sane
check_dirs() {
    # Make sure the key directory is sane
    [ -d "${key_dir}" ] || die "Keys directory '${key_dir}' does not exist"
    [ -w "${key_dir}" ] || die "Keys directory '${key_dir}' is read-only"
    [ -w "${key_dir}/index.txt" ] \
        || die "Index file ${key_dir}/index.txt is missing or read-only"
    [ -w "${key_dir}/serial" ] \
        || die "Serial file ${key_dir}/serial is missing or read-only"
    # Verify other directories
    [ -d "${pkg_dir}" ] || die "Could not find '${pkg_dir}'"
    [ -w "${pkg_dir}" ] || die "Keys directory '${pkg_dir}' is read-only"

}


# -----------------------------------------------------------------------
# Certificate and packaging routines
# -----------------------------------------------------------------------

# Make a certificate/private key pair using a locally generated
# root certificate and convert it to a PKCS #12 file including the
# the CA certificate as well.
gen_cert() {
    cd ${key_dir} || die

    echo -e "\n>>> Generating certificate request"
    openssl req -batch -nodes -days ${KEY_EXPIRE} \
        -new -newkey rsa:${KEY_SIZE} \
        -keyout "${name}.key" -out "${name}.csr" \
        -config ${key_cfg} \
        || die "Failed to generate certificate request"

    echo -e "\n>>> Generating certificate from request"
    openssl ca -batch -md sha1 -days ${KEY_EXPIRE} \
        -in "${name}.csr" -out "${name}.crt" \
        -config ${key_cfg} \
        || die "Failed to generated certificate from request"

    echo -e "\n>>> Generating pkcs12 certificate"
    openssl pkcs12 -nodes -export \
        -inkey "${name}.key" -in "${name}.crt" \
        -certfile "ca.crt" -out "${name}.p12" \
        -passout pass:${key_password} \
        || die "Failed to generate pkcs12 cerficate"

    chmod 0600 "${name}.p12" "${name}.key" || die

    [ -s "${name}.p12" ] \
        || die "Failed: pkcs12 key ${name}.p12 is zero size"
}

# Generate a new Certificate Authority and server cert/key
gen_ca() {

    mkdir -p ${key_dir} ${pkg_dir}
    touch ${key_dir}/index.txt || die
    echo "00" > ${key_dir}/serial || die
    cd ${key_dir} || die

    echo -e "\n>>> Generating new certificate authority"
    openssl req -batch -nodes -days $CA_EXPIRE \
        -new -newkey rsa:$KEY_SIZE -sha1 -x509 \
        -keyout "ca.key" -out "ca.crt" \
        -config "$key_cfg" \
        || die "Failed to generate CA cert/key"

    [ -s "ca.key" ] \
        || die "Failed: CA key ca.key is zero size"

    echo -e "\n>>> Generating server certificate request"
    openssl req -batch -nodes -days ${KEY_EXPIRE} \
        -new -newkey rsa:${KEY_SIZE} \
        -keyout "server.key" -out "server.csr" \
        -extensions server \
        -config ${key_cfg} \
        || die "Failed to generate server certificate request"

    echo -e "\n>>> Generating server certificate from request"
    openssl ca -batch -md sha1 -days ${CA_EXPIRE} \
        -in "server.csr" -out "server.crt" \
        -extensions server \
        -config ${key_cfg} \
        || die "Failed to generate server certificate"

    echo -e "\n>>> Generating empty CRL file"
    openssl ca -gencrl -out "crl.pem" -config ${key_cfg} \
        || die "Failed to generate empty CRL file"

    echo -e "\n>>> Generating TLSAUTH static key"
    ${openvpn} --genkey --secret ta.key \
        || die "Failed to generate TLSAUTH static key"

    echo -e "\n>>> Generating Diffie Hellman parameters"
    openssl dhparam -out "dh1024.pem" 1024 \
        || die "Failed to generate DH parameters"

    chmod 0600 *.key || die "Could not set key permissions"

}

# Generate the install packages
gen_pkg() {
    local pkg=openvpn-${name}-install
    local ovpn_conf_dir=${nsis_dir}/conf
    # Now build the Windows package using that key
    echo -e "\n>>> Copying data files into NSIS OpenVPN package"
    mkdir -p ${ovpn_conf_dir}
    # Copy the pkcs12 cert/key just generated into the NSIS config
    cp ${key_dir}/${name}.p12 ${ovpn_conf_dir}/client.p12 \
        || die "Could not copy pkgcs12 cert (${name}.p12)"

    # Copy the the config and static key
    cp ${cfg_dir}/client.ovpn ${ovpn_conf_dir}/client.ovpn \
        || die "Could not copy client config (client.ovpn)"
    cp ${key_dir}/ta.key ${ovpn_conf_dir}/ta.key \
        || die "Could not copy static key (ta.key)"

    echo -e "\n>>> Generating NSIS OpenVPN package"
    vecho "makensis ${nsis_file} \"-XOutFile ${pkg_dir}/${pkg}.exe\""
    if [ "${VERBOSE}" ]; then
        ${makensis} ${nsis_file} "-XOutFile ${pkg_dir}/${pkg}.exe" \
            || die "Failed to create nsis package"
    else
        ${makensis} ${nsis_file} "-XOutFile ${pkg_dir}/${pkg}.exe" \
            >/dev/null || die "Failed to create nsis package"
    fi

    # Zip it so that email programs will allow it through
    echo -e "\n>>> Zipping NSIS OpenVPN package"
    cd ${pkg_dir} || die "Failed to cd to ${pkg_dir} for zip"
    rm -f ${pkg}.zip
    zip ${pkg}.{zip,exe} || die "failed to zip"


    # Create a tarball of the config for Linux users
    echo -e "\n>>> Creating config tarball for Linux users"
    make_tmp_dir
    mkdir -p ${tmp_dir}/openvpn || die
   
    cp ${key_dir}/ca.crt ${tmp_dir}/openvpn/ca.crt \
       || die "Could not copy ca.crt"
    cp ${key_dir}/${name}.crt ${tmp_dir}/openvpn/cert.pem \
       || die "Could not copy ${name}.crt"
    cp ${key_dir}/${name}.key ${tmp_dir}/openvpn/key.pem \
       || die "Could not copy ${name}.key"
    cp ${key_dir}/ta.key ${tmp_dir}/openvpn/ta.key \
       || die "Could not copy ta.key"
    cp ${cfg_dir}/linux.conf ${tmp_dir}/openvpn/client.conf \
       || die "Could not copy linux.conf"
 
    tar czf ${pkg_dir}/openvpn-${name}-linux.tgz \
        -C ${tmp_dir} openvpn \
        || die "failed to create Linux config tarball"

    # Create a zip of the configs for updating windows users
    echo -e "\n>>> Creating config zip file for Windows update"
    mkdir -p ${tmp_dir}/config || die
   
    cp ${key_dir}/${name}.p12 ${tmp_dir}/config/client.p12 \
       || die "Could not copy ${name}.p12"
    cp ${cfg_dir}/client.ovpn ${tmp_dir}/config/client.ovpn \
       || die "Could not copy client.ovpn"
    cp ${key_dir}/ta.key ${tmp_dir}/config/ta.key \
       || die "Could not copy ta.key"
 
    # Zip it so that email programs will allow it through
    cd ${tmp_dir} || die "Failed to cd to ${tmp_dir} for zip"
    rm -f ${pkg_dir}/openvpn-${name}-config.zip
    zip ${pkg_dir}/openvpn-${name}-config.zip config/* \
        || die "failed to zip"

}


# Create a new DD-WRT router firmware image with client
# cert/keys pre-installed and configured
gen_firmware() {
    make_tmp_dir  # Creates temp dir and set tmp_dir

    echo -e "\n>>> Unpacking original firmware"
    cd ${kit_dir} || die
    if [ "${VERBOSE}" ]; then
        ./extract_firmware.sh ${fw_bin} ${tmp_dir}/firmware \
            || die "Could not extract firmware ${fw_bin}"
    else
        ./extract_firmware.sh ${fw_bin} ${tmp_dir}/firmware \
            > /dev/null || die "Could not extract firmware ${fw_bin}"
    fi

    local fw_dir=${tmp_dir}/firmware/rootfs
    local fwo_dir=${fw_dir}/etc/openvpn

    echo -e "\n>>> Copying config files and keys to firmware"
    cp ${cfg_dir}/S02openvpn ${fw_dir}/etc/init.d \
       || die "Could not copy startup script"
    chmod +x ${fw_dir}/etc/init.d/S02openvpn \
       || die "Could not make startup script executable"

    mkdir -p ${fwo_dir} || die
    cp ${cfg_dir}/nvram/* ${fwo_dir} \
       || die "Could not copy nvram configs"
    cp ${key_dir}/ca.crt ${fwo_dir}/openvpn_ca \
       || die "Could not copy ca.crt"
    cp ${key_dir}/${name}.crt ${fwo_dir}/openvpn_client \
       || die "Could not copy ${name}.crt"
    cp ${key_dir}/${name}.key ${fwo_dir}/openvpn_key \
       || die "Could not copy ${name}.key"
    cp ${key_dir}/ta.key ${fwo_dir}/openvpn_tlsauth \
       || die "Could not copy ta.key"
    cp ${cfg_dir}/router.conf ${fwo_dir}/openvpn_config \
       || die "Could not copy router.conf"

    echo -e "\n>>> Setting new router password"
    echo -n "${http_password}" > ${fwo_dir}/http_passwd \
       || die "Could not set router password"

    echo -e "\n>>> Generating firmware image (takes a couple minutes)"
    if [ "${VERBOSE}" ]; then
        ./build_firmware.sh ${tmp_dir} ${tmp_dir}/firmware \
            || die "Could not create new firmware image"
    else
        ./build_firmware.sh ${tmp_dir} ${tmp_dir}/firmware \
            >/dev/null 2>&1 || die "Could not create new firmware image"
    fi

    cp ${tmp_dir}/custom_image-wrt54g.bin \
        ${pkg_dir}/openvpn-${name}-firmware.bin \
        || die "Could not copy new firmware image"
}


# Add the client to the CRL
revoke_cert() {
    cd ${key_dir} || die

    echo -e "\n>>> Marking certificate as revoked"
    openssl ca -revoke "${name}.crt" -config ${key_cfg} \
        || die "Failed mark certificate as revoked"

    echo -e "\n>>> Generating updated CRL file"
    openssl ca -gencrl -out "crl.pem" -config ${key_cfg} \
        || die "Failed to generate updated CRL file"

    echo -e "\n>>> Verifying revocation"
    cat ca.crt crl.pem > revoke-test.pem
    openssl verify -CAfile revoke-test.pem -crl_check "${name}.crt" \
        || die "Failed to verify revocation"
}

# Copy the CRL file to the server
copy_crl() {
    local server
    for server in ${servers}; do
        scp_dest="${serv_user}@${server}:${serv_crl_path}"
        echo -e "\n>>> Copying CRL file to ${scp_dest}"
        vecho "scp -o BatchMode=yes ${key_dir}/crl.pem ${scp_dest}"
        scp -o BatchMode=yes ${key_dir}/crl.pem ${scp_dest} \
            || die "Failed to copy CRL to ${scp_dest}"
    done
}

# Show certificate information
# Expire timestamps are "YYMMDDhhmmssZ" (ASN1_UTCTIME)
show_cert() {
    local status d d1 d2 serial unknown client user email state
    local date_asn1 date_unix date_short now date_days
    local pre valid expired revoked csv title csvtitle
    title=$(printf "  NUMBER   %-40s STATUS" "USERNAME <EMAIL>")
    csv="NUMBER,USERNAME,EMAIL,STATUS,DAYS LEFT,VALID UNTIL DATE\n"
    now=$(date +%s)
    while read status d1 d2 serial unknown client; do
        case ${status} in
            V|E) d=${d1} client=${unknown#*CN=} serial=${d2} ;;
            R)   d=${d2} client=${client#*CN=} ;;
            *)   die "Bogus data in ${key_dir}/index.txt" ;;
        esac
        user=${client%/email*}
        email=${client#*/emailAddress=}

        # If name is set, then skip everything else
        [ "${name}" ] && [ "${name}" != "${user}" ] && continue

        # Process the date stamp
        date_asn1=$(date -d "${d:0:6} ${d:6:2}:${d:8:2}:${d:10:2}")
        date_unix=$(date +%s -d "${date_asn1}")
        date_short=$(date +"%Y-%m-%d" -d "${date_asn1}")
        date_days=$(( (date_unix - now) / (60*60*24) ))

        # user readable state
        pre=$(printf   "  0x%-04x   %-40s" 0x${serial} "${user} <${email}>")
        csv="${csv}${serial},${user},${email}"
        if [ "${status}" = "R" ]; then
            revoked="${revoked}${pre} revoked on ${date_short}\n"
            csv="${csv},revoked,0,${date_short}\n"
        elif [ "${date_days}" -lt 0 ]; then
            expired="${expired}${pre} expired on ${date_short}\n"
            csv="${csv},expired,0,${date_short}\n"
        else
            valid="${valid}${pre} ${date_days} days left (${date_short})\n"
            csv="${csv},valid,${date_days},${date_short}\n"
        fi
    done < ${key_dir}/index.txt
    if [ "${DO_CSV}" ]; then
        echo -e "${csv}"
    else
        echo
        [ "${revoked}" ] && echo -e "Revoked:\n${title}\n${revoked}"
        [ "${expired}" ] && echo -e "Expired:\n${title}\n${expired}"
        [ "${valid}" ] && echo -e "Valid:\n${title}\n${valid}"
    fi
}

show_access_log() {
    local server raw data data_sorted user ip
    local d1 d2 d3 d4 d5 ignore who type rest
    local date_unix vip line logs

    if [ "${DO_ALL}" ]; then
        logs="/var/log/openvpn.log*"
    else
        logs="/var/log/openvpn.log /var/log/openvpn.log.1"
    fi
    echo >&2 -e "Gathering log data, please wait\n"

    for server in ${servers}; do
        raw="$(ssh -o BatchMode=yes ${serv_user}@${server} \
            "egrep -sh 'SENT|SIGUSR1' ${logs} || true")" \
            || die "Failed to get data from ${ssh_dest}"
        while read d1 d2 d3 d4 d5 ignore who type rest; do
            user=${who%/*}
            date_unix=$(date +%s -d "$d1 $d2 $d3 $d4 $d5")
            ip=${who#*/} ip=${ip%:*}
            case ${type} in 
                SENT)    vip=${rest#*ifconfig } vip=${vip%% *} type="Opened" ;;
                SIGUSR*) vip= type="Closed" ;;
            esac
            data="$data$date_unix $type $user $ip $server $vip\n"
        done <<< "${raw}"
    done
    data_sorted="$(echo -e "${data}" | sort -n)"
    if [ "${DO_CSV}" ]; then
        echo "CONNECT TIME,STATUS,USER,SERVER IP,CLIENT IP,VIRTUAL IP"
    else
        printf "%-19s  %-6s  %-15s %-15s %-15s %s\n" \
            "Connect Time" \
            "Status" \
            "User" \
            "Server IP" \
            "Client IP" \
            "Virutal IP"
    fi
    while read date_unix type user ip server vip; do
        [ "${date_unix}" ] || continue
        date=$(date +"%a %b %_d %T" -d "@${date_unix}")
        if [ "${DO_CSV}" ]; then
            echo "${date},${type},${user},${server},${ip},${vip}"
        else
            printf "%-19s  ${type}  %-15s %-15s %-15s %s\n" \
                "${date}" \
                "${user}" \
                "${server}" \
                "${ip}" \
                "${vip}"
        fi
    done <<< "${data_sorted}"
}

show_active() {
    local server raw user ip vip inb outb date route
    printf "%-15s %-15s %-15s %s\n" \
           "User" \
           "Server IP" \
           "Client IP" \
           "Connect Time"
    printf "%-15s %-15s %-15s %s\n" \
           " " \
           " " \
           "Virtual IP" \
           "Bytes In / Bytes Out"
    printf "%-15s %-15s %-15s %s\n" \
           "---------------" \
           "---------------" \
           "---------------" \
           "--------------------"
    for server in ${servers}; do
        raw="$(ssh -o BatchMode=yes ${serv_user}@${server} \
            'egrep -s ",[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+:" \
            /var/run/openvpn/openvpn-status.log || true')" \
            || die "Failed to get data from ${server}"
        while read user ip inb outb date; do
            echo "${user}" | grep -qs "^[0-9\.]*$" && continue
            route=$(echo "${raw}" | grep ",${user},")
            vip=${route%%,*}
            printf "%-15s %-15s %-15s %s\n" \
                   "${user}" \
                   "${server}" \
                   "${ip%:*}" \
                   "${date% *}"
            printf "%-15s %-15s %-15s %s\n" \
                   " " \
                   " " \
                   "${vip%:*}" \
                   "${inb} / ${outb}"
        done <<< "${raw//,/ }"
    done
}


# -----------------------------------------------------------------------
# All functions are now defined so call main
# -----------------------------------------------------------------------

main "$@"
exit 0

